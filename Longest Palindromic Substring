class Solution {
public:
    string find_pal(string s){
        int n= s.size();
        bool table[n][n];
        memset(table,false,sizeof(table));
        for(int i=0;i<n;i++)
            table[i][i]=true;
        int len=1,start=0;
        for(int i=0;i<n-1;i++){
            if(s[i]==s[i+1]){
                table[i][i+1]=true;
                start=i;
                len=2;
            }
        }
        for(int k=3;k<=n;k++){
            for(int i=0;i<n-k+1;i++){
                int j = i+k-1;
                if(s[i]==s[j] && table[i+1][j-1]){
                    table[i][j]=true;
                    if(k>len){
                        len = k;
                        start=i;
                    }
                }
            }
        }
        return s.substr(start,len);
    }
    string longestPalindrome(string s) {
        if(s.empty())
            return s;
        if(s.size()==1)
            return s;
        return find_pal(s);
    }
};
